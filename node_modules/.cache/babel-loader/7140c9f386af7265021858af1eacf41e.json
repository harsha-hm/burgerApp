{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\harsh\\\\Documents\\\\ReactJS\\\\ReactJS-Burger-app\\\\react-complete-guide--scripts-version\\\\src\\\\containers\\\\Orders\\\\Orders.js\";\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport Order from '../../components/Order/Order';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nclass Orders extends Component {\n  componentDidMount() {\n    this.props.onFetchOrders();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }\n    }, this.props.orders.map(order => /*#__PURE__*/React.createElement(Order, {\n      key: order.id,\n      ingredients: order.ingredients,\n      price: order.price,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    orders: state.order.orders,\n    loading: state.order.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchOrders: () => dispatch(actions.fetchOrders())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));","map":{"version":3,"sources":["C:/Users/harsh/Documents/ReactJS/ReactJS-Burger-app/react-complete-guide--scripts-version/src/containers/Orders/Orders.js"],"names":["React","Component","connect","Order","axios","withErrorHandler","actions","Spinner","Orders","componentDidMount","props","onFetchOrders","render","orders","map","order","id","ingredients","price","mapStateToProps","state","loading","mapDispatchToProps","dispatch","fetchOrders"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,gBAAP,MAA6B,6CAA7B;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;AACA,OAAOC,OAAP,MAAoB,qCAApB;;AAEA,MAAMC,MAAN,SAAqBP,SAArB,CAA+B;AAE3BQ,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,KAAL,CAAWC,aAAX;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKF,KAAL,CAAWG,MAAX,CAAkBC,GAAlB,CAAsBC,KAAK,iBACxB,oBAAC,KAAD;AACA,MAAA,GAAG,EAAEA,KAAK,CAACC,EADX;AAEA,MAAA,WAAW,EAAED,KAAK,CAACE,WAFnB;AAGA,MAAA,KAAK,EAAEF,KAAK,CAACG,KAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CADL,CADJ;AAUH;;AAjB0B;;AAoB/B,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHP,IAAAA,MAAM,EAAEO,KAAK,CAACL,KAAN,CAAYF,MADjB;AAEHQ,IAAAA,OAAO,EAAED,KAAK,CAACL,KAAN,CAAYM;AAFlB,GAAP;AAIH,CALD;;AAOA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHZ,IAAAA,aAAa,EAAE,MAAMY,QAAQ,CAACjB,OAAO,CAACkB,WAAR,EAAD;AAD1B,GAAP;AAGH,CAJD;;AAMA,eAAetB,OAAO,CAACiB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CjB,gBAAgB,CAACG,MAAD,EAASJ,KAAT,CAA7D,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport {connect} from 'react-redux';\r\nimport Order from '../../components/Order/Order';\r\nimport axios from '../../axios-orders';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\n\r\nclass Orders extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onFetchOrders();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                {this.props.orders.map(order => (\r\n                    <Order\r\n                    key={order.id}\r\n                    ingredients={order.ingredients}\r\n                    price={order.price} />\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        orders: state.order.orders,\r\n        loading: state.order.loading\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFetchOrders: () => dispatch(actions.fetchOrders())\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));"]},"metadata":{},"sourceType":"module"}